/* *  Hello World for the CodeWarrior *  © 1997-1998 Metrowerks Corp. * *  Questions and comments to: *       <mailto:support@metrowerks.com> *       <http://www.metrowerks.com/> */#include	<iostream>#include	"XRedBlackTree.h"#include	"XRedBlackTree.cpp"	// Needed with templates.#include	<events.h>#include	<sioux.h>#include	<map>template< class A, class B >class jefferson{public:	struct airplane	{		A		whoof;		B		whiff;	};		airplane		mMember;};using namespace std;  //introduces namespace stdvoid	doForEachProc( long& vKey, long& vRecord );void	doForEachProc( long& vKey, long& vRecord ){	char			vOutput[5];	vOutput[4] = 0;		(*(long*) vOutput) = vRecord;			cout << vKey << ": " << vOutput << endl;}#define REC_COUNT		1000000int		oldMain(){		SIOUXSettings.asktosaveonclose = false;	SIOUXSettings.showstatusline = true;		XRedBlackTree<long,long>				vTree;	XRedBlackTree<long,long>::XRBIterator*				vIterator;	char									vOutput[5];	long									vRecord,											x;	jefferson<short,long>					dummy;		vOutput[4] = 0;		cout << "Creating 1000000 entries...\n";		vRecord = 'AAAA';		for( x = 1; x <= REC_COUNT; x++ )	{		vRecord++;		vTree.insert( x, &vRecord );	}		cout << "\nListing all using iterator:\n";		UInt32	vIterStart;	vIterStart = TickCount();		vIterator = vTree.first();	while( !(vIterator->end()) )	{		(*(long*) vOutput) = ++(*vIterator);				if( !(vIterator->end()) )			cout << vIterator->currKey() << ": " << vOutput << endl;	}		delete vIterator;		UInt32	vIterEnd;	vIterEnd = TickCount();			cout << "\nListing all using recursion:\n";		UInt32	vRecurStart;	vRecurStart = TickCount();	vTree.doForEach( doForEachProc );	UInt32	vRecurEnd;	vRecurEnd = TickCount();		cout << "Iterator took: " << (vIterEnd -vIterStart) / REC_COUNT << endl;	cout << "Recursion took: " << (vRecurEnd -vRecurStart) / REC_COUNT << endl;		return 0;}int	main(){	multimap<long,long>				vMap;	multimap<long,long>::iterator	vIter;	char							vOutput[5];	long							vRecord,									x;		vOutput[4] = 0;		cout << "Creating some entries...\n";		vRecord = 'AAAA';		for( x = 1; x <= 100; x += 2 )	{		vRecord++;		//vMap.insert( x, &vRecord );		vMap.insert( pair<const long,long>(x, vRecord) );	}		cout << "Size: " << vMap.size() << endl;		vIter = vMap.lower_bound( 1 );	if( vIter == vMap.end() )		cout << "No such entry.\n";	else		cout << vIter->first << ": " << vIter->second << endl;		vIter = vMap.lower_bound( 2 );	if( vIter == vMap.end() )		cout << "No such entry.\n";	else		cout << vIter->first << ": " << vIter->second << endl;		vIter = vMap.lower_bound( 3 );	if( vIter == vMap.end() )		cout << "No such entry.\n";	else		cout << vIter->first << ": " << vIter->second << endl;		vIter = vMap.lower_bound( x-3 );	if( vIter == vMap.end() )		cout << "No such entry.\n";	else		cout << vIter->first << ": " << vIter->second << endl;		return 0;}