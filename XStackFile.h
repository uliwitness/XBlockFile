/* ================================================================================	PROJECT:	XStackFile		FILE:		XStackFile.h		PURPOSE:	Stack file class			COPYRIGHT:	(C) Copyright 2000 by M. Uli Kusterer, all rights reserved.					REACH ME AT:				E-MAIL:		witness@weblayout.com				URL:		http://www.weblayout.com/witness			REVISIONS:		2000-07-07	UK		Created.				   ============================================================================= */#pragma mark [Headers]/* --------------------------------------------------------------------------------	Headers:   ----------------------------------------------------------------------------- */   #include	"XBlockFile.h"#pragma mark [Constants]/* --------------------------------------------------------------------------------	Constants:   ----------------------------------------------------------------------------- *//*	The following constants are the block IDs used to store the data of a stack	in a block file. There are some shared by certain objects (which start at	some multiple of 1000), while others are unique to one object type (and	start at 1). <anything>List blocks are container blocks that usually	contain other sub-blocks. Most of the block IDs are abstracted away by	this class.*/// First level block IDs (immediately in file):enum{	FILE_INFO_BLOCK_ID	= 1,	// Block with some info on file (maybe password, author info ...)	STACK_LIST_BLOCK_ID,		// Block containing the stacks in this file.	RESOURCE_LIST_BLOCK_ID		// Block containing this file's data fork resources (icons, sounds ...)};// Object block IDs (same for all message hierarchy object sub blocks, aka "entity" sub blocks):enum{	SCRIPT_BLOCK_ID				= 1000,		// Block that contains all info for this object's script.	PROPERTY_LIST_BLOCK_ID,					// Block that contains built-in properties.	USER_PROPERTY_LIST_BLOCK_ID				// Block that contains user properties.};// Script block sub-block IDs (for Anthony's Interpreter):enum{	SCRIPT_TEXT_BLOCK_ID	= 1,	// Plain-text script as entered by the user.	COMPILED_SCRIPT_BLOCK_ID,		// Script compiled into our kind of bytecode.	META_DATA_BLOCK_ID,	VARIABLE_TABLE_BLOCK_ID,		// The script's variable lists ... ?	LINE_MAPPING_TABLE_BLOCK_ID,	// Info so debugger knows which compiled instruction corresponds to which line.	TRANSLATED_SCRIPT_BLOCK_ID		// I guess this is tokenized form ... ?};// Property list block sub-block IDs:enum{	FIXED_SIZE_PROP_TABLE_BLOCK_ID = 1,		// Table with offsets into fixed size property table for each property.	FIXED_SIZE_PROPERTIES_BLOCK_ID,			// Fixed size properties (loc, rect) go here.	// Properties that need their own blocks have IDs >= 1000	PART_CONTENTS_BLOCK_ID = 1000,			// Button and field contents.	PART_STYLES_BLOCK_ID					// Text style info for field contents.};// Stack block sub-block IDs (see 'Object block IDs' for the others):enum{	STACK_BKGND_LIST_BLOCK_ID	= 1,	// Block containing all backgrounds in this stack.	STACK_CARD_LIST_BLOCK_ID			// Block containing all cards in this stack.};// Layer block sub-block IDs (same for all bkgnds and cards):enum{	LAYER_PART_LIST_BLOCK_ID	= 7000	// Block listing all buttons and fields on this layer.};// Card block sub-block IDs:enum{	CARD_UNSHARED_PART_DATA_BLOCK_ID	= 1	// Block with a part & property lists to override bg part's properties (e.g. hilite, text) if the part doesn't have sharedText or sharedHilite set.};// Bkgnd block sub-block IDs:enum{	BKGND_MEMBER_CARDS_BLOCK_ID			= 1	// Block with the IDs of the cards belonging to this bg.};/*	Property IDs are indexes into the fixed-size property offset table array.	The second bunch of IDs are property IDs for dynamic-size properties.	Dynamic-size properties' IDs all start at 65536 so you can pass them	to the same API as fixed-size properties and the API has a way to	distinguish them.*/#define	DYN_PROP_START_ID		65536// Button Property IDs:enum{	PROP_ID_BTN_RECT = 0,		// "rect"	PROP_ID_BTN_OWNER,			// "owner"	PROP_ID_BTN_VISIBLE,		// "visible"	PROP_ID_BTN_HILITE,			// "hilite"/"highlight"	PROP_ID_BTN_SHAREDHILITE	// "sharedHilite"};enum{	PROP_ID_BTN_SHORT_NAME = DYN_PROP_START_ID	// "short name"};// Field Property IDs:enum{	PROP_ID_FLD_RECT = 0,		// "rect"	PROP_ID_FLD_OWNER,			// "owner"	PROP_ID_FLD_VISIBLE,		// "visible"	PROP_ID_FLD_SELECTEDLINE,	// "selectedLine"	PROP_ID_FLD_SHAREDTEXT		// "sharedText"};enum{	PROP_ID_FLD_SHORT_NAME = DYN_PROP_START_ID	// "short name"};#pragma mark [Data Types]/* --------------------------------------------------------------------------------	Data types:   ----------------------------------------------------------------------------- */typedef	XBlockEntry*		XSFStackRef;	// Reference to a stack.typedef	XBlockEntry*		XSFBkgndRef;	// Reference to a background.typedef	XBlockEntry*		XSFCardRef;		// Reference to a card.typedef	XBlockEntry*		XSFPartRef;		// Reference to a part (field, button).typedef	XBlockEntry*		XSFLayerRef;	// Reference to a card or background.typedef	XBlockEntry*		XSFEntityRef;	// Reference to any message hierarchy object (card,bg,stack,part).#pragma mark [Class Declaration]/* --------------------------------------------------------------------------------	Class declaration:   ----------------------------------------------------------------------------- */class	XStackFile{protected:	XBlockFile		mBlockFile;		// The actual file to which this is the interface.public:			XStackFile() : mBlockFile() {};			XStackFile( char* fName ) : mBlockFile(fName) {};	virtual	~XStackFile()	{};		void	Open( bool allowWrite )		{ mBlockFile.Open(allowWrite); };	void	Close()						{ mBlockFile.Close(); };		XSFStackRef		GetStackByID( XBlockID theID, bool create = false );	XSFCardRef		GetCardByID( XSFStackRef stack, XBlockID theID, bool create = false );	XSFBkgndRef		GetBkgndByID( XSFStackRef stack, XBlockID theID, bool create = false );	XSFPartRef		GetPartByID( XSFLayerRef cardOrBg, XBlockID theID, bool create = false );		void*			GetProperty( XSFEntityRef entity, long propID, long *outSize, bool create = false );};#pragma mark [Prototypes]/* --------------------------------------------------------------------------------	Prototypes:   ----------------------------------------------------------------------------- */